// IMPLEMENTATION_DETAIL_DATABASE

/// \file id.h
/// \author Folling <mail@folling.io>

#pragma once

#include <ikarus/macros.h>

IKARUS_BEGIN_HEADER

#include <ikarus/stdtypes.h>
#include <ikarus/types/object_type.h>

/// \defgroup id Ids
/// \brief Ids are used to identify objects in the database.
/// \details They are stored as 64 bit integers with the following layout:
/// - first 8 bits: #IkarusObjectType - 255 possible values, 0 for special values
/// - last 56 bits: incremented counter generated by the database
/// @{

/// \brief A wrapper around a 64 bit integer that represents the id of an object.
/// \details They are stored as 64 bit integers with the following layout:
/// - first 8 bits: #IkarusObjectType - 255 possible values, 0 for special values
/// - last 56 bits: incremented counter generated by the database
struct IkarusId {
    /// \private \brief The value of the id.
    uint64_t value;
};

/// \brief A special id returned by failed functions.
IkarusId const IKARUS_ID_NONE{0};
/// \brief A special id used to indicate an optional id not being specified.
IkarusId const IKARUS_ID_UNSPECIFIED{1};

/// \private \brief Generates a new id for the given object type.
/// \param object_type The type of the object to generate an id for.
/// \return The generated id.
IkarusId ikarus_id_from_integer(IkarusObjectType object_type);

/// \brief Fetches the object type of the given id.
/// \param id The id to fetch the object type for.
/// \return The object type of the given id.
IKA_API IkarusObjectType ikarus_id_get_object_type(IkarusId id);

/// \brief Checks if the given id is IKARUS_ID_NONE.
/// \param id The id to check.
/// \return True if the id is IKARUS_ID_NONE, false otherwise.
IKA_API bool ikarus_id_is_none(IkarusId id);

/// \brief Checks if the given id is IKARUS_ID_UNSPECIFIED.
/// \param id The id to check.
/// \return True if the id is IKARUS_ID_UNSPECIFIED, false otherwise.
IKA_API bool ikarus_id_is_unspecified(IkarusId id);

/// @}

IKARUS_END_HEADER